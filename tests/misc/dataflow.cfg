NOTE : Temporary registers are considered as
       variables of the intermediate language. 
       Variable 'R0' (that refers to the 
       physical register 'RO') is always 
       considered LIVE-IN for each node of 
       a basic block. 
       Thus, in the following control flow graph, 
       'R0' will never appear as LIVE-IN or LIVE-OUT
       variable for a statement.

       If you want to consider 'R0' as
       a normal variable, you have to set
       to 0 the value of the macro CFLOW_ALWAYS_LIVEIN_R0
       defined in "cflow_constants.h".


**************************
     CONTROL FLOW GRAPH   
**************************
NUMBER OF BASIC BLOCKS : 6 
NUMBER OF USED VARIABLES : 7 
--------------------------
START BASIC BLOCK INFOS.  
--------------------------
[BLOCK 1] 
NUMBER OF PREDECESSORS : 0 
NUMBER OF SUCCESSORS : 2 
NUMBER OF INSTRUCTIONS : 6 
	1.  	READ R2 0 
			DEF = [R2]
			LIVE IN = []
			LIVE OUT = [R2]
	2.  	SUBI R3 R2 #0 
			DEF = [R3]
			USES = [R2]
			LIVE IN = [R2]
			LIVE OUT = [R2]
	3.  	STORE R2 L1 
			USES = [R2]
			LIVE IN = [R2]
			LIVE OUT = [R2]
	4.  	SGE R3 0 
			DEF = [R3]
			LIVE IN = [R2]
			LIVE OUT = [R2, R3]
	5.  	ANDB R3 R3 R3 
			DEF = [R3]
			USES = [R3, R3]
			LIVE IN = [R2, R3]
			LIVE OUT = [R2]
	6.  	BEQ L2 
			LIVE IN = [R2]
			LIVE OUT = [R2]
--------------------------
[BLOCK 2] 
NUMBER OF PREDECESSORS : 2 
NUMBER OF SUCCESSORS : 2 
NUMBER OF INSTRUCTIONS : 3 
	1.  L3	ANDB R2 R2 R2 
			DEF = [R2]
			USES = [R2, R2]
			LIVE IN = [R2]
			LIVE OUT = [R2]
	2.  	STORE R2 L1 
			USES = [R2]
			LIVE IN = [R2]
			LIVE OUT = []
	3.  	BEQ L4 
			LIVE IN = []
			LIVE OUT = []
--------------------------
[BLOCK 3] 
NUMBER OF PREDECESSORS : 1 
NUMBER OF SUCCESSORS : 1 
NUMBER OF INSTRUCTIONS : 9 
	1.  	LOAD R1 L0 
			DEF = [R1]
			LIVE IN = []
			LIVE OUT = [R1]
	2.  	LOAD R2 L1 
			DEF = [R2]
			LIVE IN = [R1]
			LIVE OUT = [R2, R1]
	3.  	ADD R4 R1 R2 
			DEF = [R4]
			USES = [R1, R2]
			LIVE IN = [R2, R1]
			LIVE OUT = [R2, R4]
	4.  	ADD R1 R0 R4 
			DEF = [R1]
			USES = [R0, R4]
			LIVE IN = [R2, R4]
			LIVE OUT = [R2, R1]
	5.  	STORE R1 L0 
			USES = [R1]
			LIVE IN = [R2, R1]
			LIVE OUT = [R2]
	6.  	SUBI R5 R2 #1 
			DEF = [R5]
			USES = [R2]
			LIVE IN = [R2]
			LIVE OUT = [R5]
	7.  	ADD R2 R0 R5 
			DEF = [R2]
			USES = [R0, R5]
			LIVE IN = [R5]
			LIVE OUT = [R2]
	8.  	STORE R2 L1 
			USES = [R2]
			LIVE IN = [R2]
			LIVE OUT = [R2]
	9.  	BT L3 
			LIVE IN = [R2]
			LIVE OUT = [R2]
--------------------------
[BLOCK 4] 
NUMBER OF PREDECESSORS : 1 
NUMBER OF SUCCESSORS : 1 
NUMBER OF INSTRUCTIONS : 4 
	1.  L4	LOAD R1 L0 
			DEF = [R1]
			LIVE IN = []
			LIVE OUT = [R1]
	2.  	WRITE R1 0 
			USES = [R1]
			LIVE IN = [R1]
			LIVE OUT = [R1]
	3.  	STORE R1 L0 
			USES = [R1]
			LIVE IN = [R1]
			LIVE OUT = []
	4.  	BT L5 
			LIVE IN = []
			LIVE OUT = []
--------------------------
[BLOCK 5] 
NUMBER OF PREDECESSORS : 1 
NUMBER OF SUCCESSORS : 1 
NUMBER OF INSTRUCTIONS : 2 
	1.  L2	ADDI R6 R0 #-1 
			DEF = [R6]
			USES = [R0]
			LIVE IN = []
			LIVE OUT = [R6]
	2.  	WRITE R6 0 
			USES = [R6]
			LIVE IN = [R6]
			LIVE OUT = []
--------------------------
[BLOCK 6] 
NUMBER OF PREDECESSORS : 2 
NUMBER OF SUCCESSORS : 1 
NUMBER OF INSTRUCTIONS : 1 
	1.  L5	HALT 
			LIVE IN = []
			LIVE OUT = []
**************************


